<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gasterblaster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>HerenciaOffset</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>con= 1;
idealx= 200;
idealy= 200;
idealrot= 90;
image_xscale= 1;
image_yscale= 1;
image_speed= 0;
skip= 1;
pause= 8;
col_o= 0;
bt= 0;
btimer= 0;
fade= 1;
terminal= 10;
bb= 0;
bbsiner= 0;
sound = 0;
lock = 0;
lock_shake = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>con++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if image_index &gt;= 4 &amp;&amp; lock = 0 &amp;&amp; sound = 1 {

audio_play_sound(snd_Gaster2, 0, false);
lock++;

}

if image_index &gt;= 4 &amp;&amp; lock_shake = 0 {

sh = instance_create(0, 0, obj_terremoto);
sh.shake = 3;
lock_shake++;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.inverse = 0 { image_blend = c_white; } else { image_blend = c_black; }

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
if(con == 1 &amp;&amp; skip == 0) {
    x+= floor((idealx - x) / 3);
    y+= floor((idealy - y) / 3);
    if(x &lt; idealx) x++;
    if(y &lt; idealy) y++;
    if(x &gt; idealx) x--;
    if(y &gt; idealy) y--;
    if(abs(x - idealx) &lt; 3) x= idealx;
    if(abs(y - idealy) &lt; 3) y= idealy;
    if(abs(x - idealx) &lt; 0.1 &amp;&amp; abs(y - idealy) &lt; 0.1) {
        con= 2;
        alarm[4]= 2;
    }
}
if(con == 1 &amp;&amp; skip == 1) {
    x+= floor((idealx - x) / 3);
    y+= floor((idealy - y) / 3);
    if(x &lt; idealx) x++;
    if(y &lt; idealy) y++;
    if(x &gt; idealx) x--;
    if(y &gt; idealy) y--;
    if(abs(x - idealx) &lt; 3) x= idealx;
    if(abs(y - idealy) &lt; 3) y= idealy;
    image_angle+= floor((idealrot - image_angle) / 3);
    if(image_angle &lt; idealrot)
        image_angle++;
    if(image_angle &gt; idealrot)
        image_angle--;
    if(abs(image_angle - idealrot) &lt; 3)
        image_angle= idealrot;
    if(abs(x - idealx) &lt; 0.1 &amp;&amp; abs(y - idealy) &lt; 0.1 &amp;&amp; abs(idealrot - image_angle) &lt; 0.01) {
        con= 4;
        alarm[4]= pause;
    }
}
if(con == 3) {
    image_angle+= floor((idealrot - image_angle) / 3);
    if(image_angle &lt; idealrot)
        image_angle++;
    if(image_angle &gt; idealrot)
        image_angle--;
    if(abs(image_angle - idealrot) &lt; 3)
        image_angle= idealrot;
    if(abs(idealrot - image_angle) &lt; 0.01) {
        con= 4;
        alarm[4]= pause;
    }
}
if(con == 5) {
    con= 6;
    alarm[4]= 4;
}
if(con == 6) { image_index++; }

if(con == 7) {
    if(image_index == 4) image_index= 5;
    else  {
        if(image_index == 5) image_index= 4;
    }
    direction= idealrot + 90;
    
    btimer++;
    if(btimer &lt; 5) {
        speed++;
        bt+= floor(35 * image_xscale / 2);
    } else  speed+= 4;
    if(btimer &gt; 5 + terminal) {
        bt*= 0.8;
        fade-= 0.1;
        draw_set_alpha(fade);
        if(bt &lt;= 2) instance_destroy();
    }
    if(x &lt; -sprite_width - 400) speed= 0;
    if(x &gt; room_width + sprite_width + 400) speed= 0;
    if(y &gt; room_height + sprite_height + 400) speed= 0;
    if(x &lt; -sprite_height - 400) speed= 0;
    bbsiner++;
    bb= sin(bbsiner / 1.5) * bt / 4;

    xx= lengthdir_x(70, image_angle - 90) * image_xscale * 1.15;
    yy= lengthdir_y(70, image_angle - 90) * image_xscale * 1.15;
    
    rr= random(2) - random(2);
    rr2= random(2) - random(2);
    xxx= lengthdir_x(1000000000, image_angle - 90);
    yyy= lengthdir_y(1000000000, image_angle - 90);
    if global.inverse = 0 { draw_set_color(c_white); } else { draw_set_color(c_black); }
    draw_line_width(x + xx + rr, y + yy + rr2, x + xxx + rr, y + yyy + rr2, bt + bb);
    
    xxa= lengthdir_x(50, image_angle - 90) * image_xscale * 1.15;
    yya= lengthdir_y(50, image_angle - 90) * image_xscale * 1.15;
    xxb= lengthdir_x(60, image_angle - 90) * image_xscale * 1.15;
    yyb= lengthdir_y(60, image_angle - 90) * image_xscale * 1.15;
    
    draw_line_width(x + xx + rr, y + yy + rr2, x + xxa + rr, y + yya + rr2, bt / 2 + bb);
    draw_line_width(x + xx + rr, y + yy + rr2, x + xxb + rr, y + yyb + rr2, bt / 1.25 + bb);
    nx_factor= lengthdir_x(1, image_angle);
    ny_factor= lengthdir_y(1, image_angle);
    if(col_o == 1 &amp;&amp; fade &gt;= 0.8) {
        cl= 0;
        while(cl &lt; 4) {
            if(collision_line(x + xx - nx_factor * bt / 2 * cl / 4, y + yy - ny_factor * bt / 2 * cl / 4, x + xxx - nx_factor * bt / 2 * cl / 4, y + yyy - ny_factor * bt / 2 * cl / 4, obj_jugador, 0, 1))
                scr_golpe(8);
            cl++;
        }
        cl= 0;
        while(cl &lt; 4) {
            if(collision_line(x + xx + nx_factor * bt / 2 * cl / 4, y + yy + ny_factor * bt / 2 * cl / 4, x + xxx + nx_factor * bt / 2 * cl / 4, y + yyy + ny_factor * bt / 2 * cl / 4, obj_jugador, 0, 1))
                scr_golpe(8);
            cl++;
        }
    }
    if(col_o == 0) col_o= 1;
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
