<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_heart</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprHeartMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_cargar();

enum COLOR { red, blue, blue_izquierda, blue_derecha, blue_arriba }

currentState = COLOR.red;
targetState = COLOR.red;

estado = 0;
pitido = 0;
posicion = 0;

vel = 5;
width = 14;
height = 14;
shake = 0;

ySPD = 0;
grav = 0.3;
jumpPOW = 8;
caida = 0.2;

oldX = x;
oldY = y;

lockEscape = 0;

gg = 0;

input_buffer = 0;
tolerancia = 6;

poderTerremoto = 2;

if global.nohit = 0 {

global.totalHP = 44;
global.hp = 44;

} else {

global.totalHP = 1;
global.hp = 1;

}

global.HUDyPos = 410;

alarm[0] = 30;

moving = false;

global.colorfondo = c_black;

global.inverse = 0;

if room = room_combate {

    if global.hardmode = 0 {

        timeline_index = tml_hell;
        timeline_position = 0;
        timeline_running = true;

    } else {

        timeline_index = tml_hell_hardmode;
        timeline_position = 0;
        timeline_running = true;

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jugador Golpeado

if pitido &gt; 0 {

    pitido--;
    image_alpha = 1.5 - image_alpha;
    alarm[1] = 2;
    
} else { estado = 0; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mantener en caja

if instance_exists(obj_caja) {

if x + width &gt;= obj_caja.xPos + obj_caja.width { x = obj_caja.xPos + obj_caja.width - width; }

if x - width &lt;= obj_caja.xPos { x = obj_caja.xPos + width; }  

if y + height &gt;= obj_caja.yPos + obj_caja.height { y = obj_caja.yPos + obj_caja.height - height; }

if y - height &lt;= obj_caja.yPos { y = obj_caja.yPos + height; }

}

if input_buffer &gt; 0 { input_buffer--; }

if global.hp &gt; global.totalHP { global.hp = global.totalHP; }

oldX = xprevious;
oldY = yprevious;

if oldX != x || oldY != y { moving = 1 } else { moving = 0; }


if KeyCont.key_primary[0] = 1 { posicion = timeline_position; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cambio de color

if global.inverse = 0 {

switch(currentState) {
    
        case COLOR.red:
            image_blend = c_red;
            image_index = 0;
            image_angle = 0;
            break;
            
        case COLOR.blue:
            image_blend = c_blue;
            image_index = 0;
            image_angle = 0;
            break;
            
        case COLOR.blue_izquierda:
            image_blend = c_blue;
            image_index = 0;
            image_angle = -90;
            break;
        
        case COLOR.blue_derecha:
            image_blend = c_blue;
            image_index = 0;
            image_angle = 90;
            break;
            
        case COLOR.blue_arriba:
            image_blend = c_blue;
            image_index = 0;
            image_angle = 180;
            break;
                   
}

} else { image_blend = c_black; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Si el corazon es Rojo...

if currentState = COLOR.red &amp;&amp; instance_exists(obj_caja) {

    if KeyCont.key_up[0] = 1 || KeyCont.key_up[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { y -= vel/2; } else { y -= vel; }
        
    }
    
    if KeyCont.key_down[0] = 1 || KeyCont.key_down[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { y += vel/2; } else { y += vel; }

    }
    

    //Movimiento Horizontal
    
    if KeyCont.key_left[0] = 1 || KeyCont.key_left[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { x -= vel/2; } else { x -= vel; }

    }
    
    if KeyCont.key_right[0] = 1 || KeyCont.key_right[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { x += vel/2; } else { x += vel; }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Si el corazon es Azul con gravedad hacia abajo...

if currentState = COLOR.blue &amp;&amp; instance_exists(obj_caja) {
  
    y += ySPD;
    ySPD += grav;
    
    
if ySPD &lt;= 0 &amp;&amp; KeyCont.key_up[0] = 0 { ySPD *= caida; }

if y + height &gt;= obj_caja.yPos + obj_caja.height { //Colision con Caja

    ySPD = 0;
    y = obj_caja.yPos + obj_caja.height - height ;
        
    if KeyCont.key_up[0] = 1 || KeyCont.key_up[0] = 2 { ySPD = -jumpPOW; }
    
    if input_buffer &gt; 0 { ySPD = -jumpPOW; }
       
}



/* BUFFER DE ENTRADA */
if KeyCont.key_up[0] = 1 || KeyCont.key_up[0] = 2 { 

if y + height &lt;= obj_caja.yPos + obj_caja.height { input_buffer = tolerancia; }

}
/* BUFFER DE ENTRADA */



if y + height &gt;= obj_caja.yPos + obj_caja.height {

    if grav &gt; 0.4 {

        grav = 0.4;
        sh = instance_create(0, 0, obj_terremoto);
        sh.shake = poderTerremoto;
        audio_play_sound(snd_Azotado,0,false);

    }
    
}    
    
    //Movimiento Horizontal
    
    if KeyCont.key_left[0] = 1 || KeyCont.key_left[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { x -= vel/2; } else { x -= vel; } }
    
    if KeyCont.key_right[0] = 1 || KeyCont.key_right[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { x += vel/2; } else { x += vel; } }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Si el corazon es Azul con gravedad a la izquierda...

if currentState = COLOR.blue_izquierda &amp;&amp; instance_exists(obj_caja) {

    x += ySPD;
    ySPD -= grav;
    
if ySPD &gt;= 0 &amp;&amp; KeyCont.key_right[0] = 0 { ySPD *= caida; }

if x - height &lt;= obj_caja.xPos {

    ySPD = 0;
    x = obj_caja.xPos + height;
        
    if KeyCont.key_right[0] = 1 || KeyCont.key_right[0] = 2 { ySPD = jumpPOW; }
    
    if input_buffer &gt; 0 { ySPD = jumpPOW; }

}


/* BUFFER DE ENTRADA */
if KeyCont.key_right[0] = 1 || KeyCont.key_right[0] = 2 { 

if x - height &gt;= obj_caja.xPos { input_buffer = tolerancia; }

}
/* BUFFER DE ENTRADA */


if x - height &lt;= obj_caja.xPos {

    if grav &gt; 0.4 {
    
        grav = 0.4;
        sh = instance_create(0, 0, obj_terremoto);
        sh.shake = poderTerremoto;
        audio_play_sound(snd_Azotado,0,false);
        
    }
    
}    
    
    //Movimiento Vertical
    
    if KeyCont.key_up[0] = 1 || KeyCont.key_up[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { y -= vel/2; } else { y -= vel; }
      
    }
    
    if KeyCont.key_down[0] = 1 || KeyCont.key_down[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { y += vel/2; } else { y += vel; }

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Si el corazon es Azul con gravedad a la derecha...

if currentState = COLOR.blue_derecha &amp;&amp; instance_exists(obj_caja) {

    x += ySPD;
    ySPD += grav;
    
if ySPD &lt;= 0 &amp;&amp; KeyCont.key_left[0] = 0 { ySPD *= caida; }

if x + height &gt;= obj_caja.xPos + obj_caja.width {

    ySPD = 0;
    x = obj_caja.xPos + obj_caja.width - height ;
        
    if KeyCont.key_left[0] = 1 || KeyCont.key_left[0] = 2 { ySPD = -jumpPOW; }
    
    if input_buffer &gt; 0 { ySPD = -jumpPOW; }

}


/* BUFFER DE ENTRADA */
if KeyCont.key_left[0] = 1 || KeyCont.key_left[0] = 2 { 

if x + height &lt;= obj_caja.xPos + obj_caja.width { input_buffer = tolerancia; }

}
/* BUFFER DE ENTRADA */

if x + height &gt;= obj_caja.xPos + obj_caja.width {

    if grav &gt; 0.4 {
    
        grav = 0.4;
        sh = instance_create(0, 0, obj_terremoto);
        sh.shake = poderTerremoto;
        audio_play_sound(snd_Azotado,0,false);
        
    }
    
}    
    
    //Movimiento Vertical
    
    if KeyCont.key_up[0] = 1 || KeyCont.key_up[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { y -= vel/2; } else { y -= vel; }
        
    }
    
    if KeyCont.key_down[0] = 1 || KeyCont.key_down[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { y += vel/2; } else { y += vel; }

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Si el corazon es Azul con gravedad invertida...

if currentState = COLOR.blue_arriba &amp;&amp; instance_exists(obj_caja) {

    y += ySPD;
    ySPD -= grav;


if ySPD &gt;= 0 &amp;&amp; KeyCont.key_down[0] = 0 { ySPD *= caida; }

if y - height &lt;= obj_caja.yPos { 

    ySPD = 0;
    y = obj_caja.yPos + height;
    
    if KeyCont.key_down[0] = 1 || KeyCont.key_down[0] = 2 { ySPD = +jumpPOW; }
    
    if input_buffer &gt; 0 { ySPD = +jumpPOW; }
  
}


/* BUFFER DE ENTRADA */
if KeyCont.key_down[0] = 1 || KeyCont.key_down[0] = 2 { 

if y - height &gt;= obj_caja.yPos { input_buffer = tolerancia; }

}
/* BUFFER DE ENTRADA */


if y - height &lt;= obj_caja.yPos {

    if grav &gt; 0.4 {
    
        grav = 0.4;
        sh = instance_create(0, 0, obj_terremoto);
        sh.shake = poderTerremoto;
        audio_play_sound(snd_Azotado,0,false);
        
    }
    
}
 
    //Movimiento Horizontal
    if KeyCont.key_left[0] = 1 || KeyCont.key_left[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { x -= vel/2; } else { x -= vel; } }
 
    
    if KeyCont.key_right[0] = 1 || KeyCont.key_right[0] = 2 {
    
        if KeyCont.key_secondary[0] = 2 { x += vel/2; } else { x += vel; } }
        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_escape) &amp;&amp; lockEscape = 0 {

audio_stop_all();
timeline_running = false;
t = instance_create(0,0,obj_transicion_manipulable);
t.orden = room_menu;
estado = 2;
audio_play_sound(snd_seleccion, 0, false);
lockEscape++;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Color de Room y caja de combate

if instance_exists(obj_caja) {

if global.inverse = 0 {

draw_set_color(c_black);
background_showcolour = c_black;
background_colour = c_black;

} else {

draw_set_color(c_white);
background_showcolour = c_white;
background_colour = c_white;

}

draw_rectangle(-1000, -1000, obj_caja.x, room_height + 1000,0); //Izquierda
draw_rectangle(obj_caja.x + obj_caja.sprite_width, 0, room_width + 1000, room_height + 1000, 0); //Derecha
draw_rectangle(-300,-300,room_width + 300, obj_caja.y, 0); //Arriba
draw_rectangle(-1000, obj_caja.y + obj_caja.sprite_height, room_width + 1000, room_height + 1000, 0); //Abajo

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD

//global.HUDyPos equivale a 410

draw_set_font(fnt_mars);
draw_set_halign(fa_left);
draw_set_valign(fa_center);

if instance_exists(obj_caja) {

if global.inverse = 0 {

draw_set_color(c_red);
draw_rectangle(260 + global.offset, global.HUDyPos - 10, 260 + global.totalHP, global.HUDyPos + 10, false);
draw_set_color(c_lime);
draw_rectangle(260, global.HUDyPos - 10, 260 + global.totalHP, global.HUDyPos + 10, false);
draw_set_color(c_blue);
draw_rectangle(260 - global.offset, global.HUDyPos - 10, 260 + global.totalHP, global.HUDyPos + 10, false);
draw_set_color(c_maroon);
draw_rectangle(260, global.HUDyPos - 10, 260 + global.totalHP, global.HUDyPos + 10, false);
draw_set_color(global.bcolor);
draw_rectangle(260, global.HUDyPos - 10, 260 + global.hp, global.HUDyPos + 10, false);

draw_set_font(fnt_mars);
draw_set_color(c_red);
draw_text(220 - global.offset, global.HUDyPos, "HP");
draw_text(30 - global.offset, global.HUDyPos, global.nombre);
draw_text(260 + global.totalHP + 10 - global.offset, global.HUDyPos, string(global.hp) + " / " + string(global.totalHP));
draw_set_color(c_lime);
draw_text(220, global.HUDyPos, "HP");
draw_text(30, global.HUDyPos, global.nombre);
draw_text(260 + global.totalHP + 10, global.HUDyPos, string(global.hp) + " / " + string(global.totalHP));
draw_set_color(c_blue);
draw_text(220 + global.offset, global.HUDyPos, "HP");
draw_text(30 + global.offset, global.HUDyPos, global.nombre);
draw_text(260 + global.totalHP + 10 + global.offset, global.HUDyPos, string(global.hp) + " / " + string(global.totalHP));
draw_set_color(c_white);
draw_text(220, global.HUDyPos, "HP");
draw_text(30, global.HUDyPos, global.nombre);
draw_text(260 + global.totalHP + 10, global.HUDyPos, string(global.hp) + " / " + string(global.totalHP));

} else {

draw_set_color(c_purple);
draw_rectangle(260, global.HUDyPos - 10, 260 + global.totalHP, global.HUDyPos + 10, false);
draw_set_color(c_lime);
draw_rectangle(260, global.HUDyPos - 10, 260 + global.hp, global.HUDyPos + 10, false);

draw_set_font(fnt_mars);
draw_set_color(c_red);
draw_text(220 - global.offset, global.HUDyPos, "HP");
draw_text(30 - global.offset, global.HUDyPos, global.nombre);
draw_text(260 + global.totalHP + 10 - global.offset, global.HUDyPos, string(global.hp) + " / " + string(global.totalHP));
draw_set_color(c_lime);
draw_text(220, global.HUDyPos, "HP");
draw_text(30, global.HUDyPos, global.nombre);
draw_text(260 + global.totalHP + 10, global.HUDyPos, string(global.hp) + " / " + string(global.totalHP));
draw_set_color(c_blue);
draw_text(220 + global.offset, global.HUDyPos, "HP");
draw_text(30 + global.offset, global.HUDyPos, global.nombre);
draw_text(260 + global.totalHP + 10 + global.offset, global.HUDyPos, string(global.hp) + " / " + string(global.totalHP));
draw_set_color(c_black);
draw_text(220, global.HUDyPos, "HP");
draw_text(30, global.HUDyPos, global.nombre);
draw_text(260 + global.totalHP + 10, global.HUDyPos, string(global.hp) + " / " + string(global.totalHP));

}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
