<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Customize here
global.wave = 0;
hazeSpeed = 0; //Speed of the haze animation
hazeSize = 0; //Size of the haze disturbances
hazeWaveLength = 0; //Wavelength of the haze
                    //or, Size of the haze map

viewN = 0; //View number, if using views

//-----------END----------------------------

//vars
cameraUsed = false;
coverScreen = true;
debugMode = false;

//surf
/*if (cameraUsed){
    surfW = view_wview[viewN];
    surfH = view_hview[viewN];
}
else{
    surfW = room_width;
    surfH = room_height;
}*/

//surface
surfW = surface_get_width(application_surface);
surfH = surface_get_height(application_surface);

hazeSurf = surface_create(surfW, surfH);
haze_surf_clear(hazeSurf);

//points
hazePoints = ds_list_create();
//0 - X
//1 - Y
//2 - Radius
hazeAreas = ds_list_create();
//0 - X
//1 - Y
//2 - W
//3 - H

//shader
uniTime = shader_get_uniform(sh_haze, "Time");
uniSamp = shader_get_sampler_index(sh_haze, "Noise");
uniSampSize = shader_get_sampler_index(sh_haze, "NoiseSize");

uniSpeed = shader_get_uniform(sh_haze, "Speed");
uniSize = shader_get_uniform(sh_haze, "Size");
uniFreq = shader_get_uniform(sh_haze, "Freq");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(hazePoints);
ds_list_destroy(hazeAreas);
surface_free(hazeSurf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hazeSpeed = global.wave; //Speed of the haze animation
hazeSize = global.wave; //Size of the haze disturbances
hazeWaveLength = global.wave; //Wavelength of the haze
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get app surf size
surfW = surface_get_width(application_surface);
surfH = surface_get_height(application_surface);

var guiW = display_get_gui_width();
var guiH = display_get_gui_height();

//Aspect Ratio
var rW = surfW/surfH;

//Set app surf size to GUI layer
surface_resize(application_surface, guiH * rW,
    guiH);

//Update app surf size
surfW = surface_get_width(application_surface);
surfH = surface_get_height(application_surface);
    
//Adjust location
//var pos = application_get_position();
//display_set_gui_maximise(1, 1, pos[0], pos[1]);

//Set GUI size to app surf
//display_set_gui_size(surfW, surfH);

if (!surface_exists(hazeSurf)){
    hazeSurf = surface_create(surfW, surfH);
    haze_surf_clear(hazeSurf);
}
else{
    surface_resize(hazeSurf, surfW, surfH);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw haze areas
//Vars
var pos = application_get_position();

//Point surf
var pointSurf = surface_create(surfW, surfH);

surface_set_target(pointSurf);
//haze_surf_clear(pointSurf);
draw_clear_alpha(0, 0);

draw_clear(c_black);

//cover screen
if (coverScreen){
    draw_set_color(c_white);
    draw_rectangle(0, 0, surfW, surfH, false);
}

//circle
draw_set_blend_mode(bm_add);

for(var i=0; i&lt;ds_list_size(hazePoints); i++){
    //get array
    var Arr = hazePoints[|i];
    
    //translate to surface coords
    var sX, sY, sR;
    sX = Arr[0] - (view_xview[viewN]*cameraUsed);
    sY = Arr[1] - (view_yview[viewN]*cameraUsed);
    sR = Arr[2];
    
    //subtract app coord
    //sX -= pos[0]/2;
    //sY -= pos[1]/2;
    
    //scale
    if (cameraUsed){
        sX *= surfW/view_wview[viewN];
        sY *= surfH/view_hview[viewN];
        sR *= surfW/view_wview[viewN];
    }
    else{
        sX *= surfW/room_width;
        sY *= surfH/room_height;
        sR *= surfW/room_width;
    }
    
    //draw
    draw_circle_colour(sX, sY, sR, c_white, c_black, false);
}

//rect
for(var i=0; i&lt;ds_list_size(hazeAreas); i++){
    //get array
    var Arr = hazeAreas[|i];
    
    //translate to surface coords
    var sX, sY, sW, sH;
    sX = Arr[0] - (view_xview[viewN]*cameraUsed);
    sY = Arr[1] - (view_yview[viewN]*cameraUsed);
    sW = Arr[2];
    sH = Arr[3];
    
    //scale
    if (cameraUsed){
        sX *= surfW/view_wview[viewN];
        sY *= surfH/view_hview[viewN];
        sW *= surfW/view_wview[viewN];
        sH *= surfH/view_hview[viewN];
    }
    else{
        sX *= surfW/room_width;
        sY *= surfH/room_height;
        sW *= surfW/room_width;
        sH *= surfH/room_height;
    }
    
    //draw
    draw_set_color(c_white);
    draw_rectangle(sX, sY, sX+sW, sY+sH, false);
}

draw_set_blend_mode(bm_normal);

surface_reset_target();

//Draw to surface
surface_set_target(hazeSurf);

//haze_surf_clear(hazeSurf);
draw_clear_alpha(0, 0);

//Draw app surf
shader_set(sh_haze);

shader_set_uniform_f(uniTime, current_time);
texture_set_repeat_ext(uniSamp, true);
var NTex = sprite_get_texture(spr_haze_noise, 0);
texture_set_stage(uniSamp, NTex);
shader_set_uniform_f(uniSampSize, texture_get_width(NTex), texture_get_height(NTex));

shader_set_uniform_f(uniSpeed, hazeSpeed/100);
shader_set_uniform_f(uniSize, hazeSize/1000);
shader_set_uniform_f(uniFreq, hazeWaveLength/2.5);

draw_surface(application_surface, 0, 0);

shader_reset();

//Points
shader_set(sh_mask);
if (!debugMode) draw_set_blend_mode_ext(bm_zero, bm_src_color);
draw_surface(pointSurf, 0, 0);
draw_set_blend_mode(bm_normal);
shader_reset();

//Debug
if (debugMode){
    draw_set_color(c_red);
    draw_rectangle(0, 0, 4, 4, false);
    draw_set_color(c_white);
}

surface_reset_target();

surface_free(pointSurf);

//Draw haze surface
draw_surface(hazeSurf, 0, 0);

//Debug
if (debugMode){
    draw_set_color(c_red);

    draw_text(5, 5, "App surf: " + string(surfW) + ", " + string(surfH) + "#GUI layer: "
        + string(display_get_gui_width()) + ", " + string(display_get_gui_height()));
        
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
